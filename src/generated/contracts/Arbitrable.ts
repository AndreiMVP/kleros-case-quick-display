/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArbitrableInterface extends Interface {
  getFunction(
    nameOrSignature: "arbitratorExtraData" | "rule" | "arbitrator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MetaEvidence" | "Dispute" | "Evidence" | "Ruling"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "arbitratorExtraData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "arbitratorExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
}

export namespace MetaEvidenceEvent {
  export type InputTuple = [_metaEvidenceID: BigNumberish, _evidence: string];
  export type OutputTuple = [_metaEvidenceID: bigint, _evidence: string];
  export interface OutputObject {
    _metaEvidenceID: bigint;
    _evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _disputeID: BigNumberish,
    _metaEvidenceID: BigNumberish,
    _evidenceGroupID: BigNumberish
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _disputeID: bigint,
    _metaEvidenceID: bigint,
    _evidenceGroupID: bigint
  ];
  export interface OutputObject {
    _arbitrator: string;
    _disputeID: bigint;
    _metaEvidenceID: bigint;
    _evidenceGroupID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EvidenceEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _evidenceGroupID: BigNumberish,
    _party: AddressLike,
    _evidence: string
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _evidenceGroupID: bigint,
    _party: string,
    _evidence: string
  ];
  export interface OutputObject {
    _arbitrator: string;
    _evidenceGroupID: bigint;
    _party: string;
    _evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RulingEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _disputeID: BigNumberish,
    _ruling: BigNumberish
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _disputeID: bigint,
    _ruling: bigint
  ];
  export interface OutputObject {
    _arbitrator: string;
    _disputeID: bigint;
    _ruling: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Arbitrable extends BaseContract {
  connect(runner?: ContractRunner | null): Arbitrable;
  waitForDeployment(): Promise<this>;

  interface: ArbitrableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  arbitratorExtraData: TypedContractMethod<[], [string], "view">;

  rule: TypedContractMethod<
    [_disputeID: BigNumberish, _ruling: BigNumberish],
    [void],
    "nonpayable"
  >;

  arbitrator: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "arbitratorExtraData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rule"
  ): TypedContractMethod<
    [_disputeID: BigNumberish, _ruling: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "arbitrator"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MetaEvidence"
  ): TypedContractEvent<
    MetaEvidenceEvent.InputTuple,
    MetaEvidenceEvent.OutputTuple,
    MetaEvidenceEvent.OutputObject
  >;
  getEvent(
    key: "Dispute"
  ): TypedContractEvent<
    DisputeEvent.InputTuple,
    DisputeEvent.OutputTuple,
    DisputeEvent.OutputObject
  >;
  getEvent(
    key: "Evidence"
  ): TypedContractEvent<
    EvidenceEvent.InputTuple,
    EvidenceEvent.OutputTuple,
    EvidenceEvent.OutputObject
  >;
  getEvent(
    key: "Ruling"
  ): TypedContractEvent<
    RulingEvent.InputTuple,
    RulingEvent.OutputTuple,
    RulingEvent.OutputObject
  >;

  filters: {
    "MetaEvidence(uint256,string)": TypedContractEvent<
      MetaEvidenceEvent.InputTuple,
      MetaEvidenceEvent.OutputTuple,
      MetaEvidenceEvent.OutputObject
    >;
    MetaEvidence: TypedContractEvent<
      MetaEvidenceEvent.InputTuple,
      MetaEvidenceEvent.OutputTuple,
      MetaEvidenceEvent.OutputObject
    >;

    "Dispute(address,uint256,uint256,uint256)": TypedContractEvent<
      DisputeEvent.InputTuple,
      DisputeEvent.OutputTuple,
      DisputeEvent.OutputObject
    >;
    Dispute: TypedContractEvent<
      DisputeEvent.InputTuple,
      DisputeEvent.OutputTuple,
      DisputeEvent.OutputObject
    >;

    "Evidence(address,uint256,address,string)": TypedContractEvent<
      EvidenceEvent.InputTuple,
      EvidenceEvent.OutputTuple,
      EvidenceEvent.OutputObject
    >;
    Evidence: TypedContractEvent<
      EvidenceEvent.InputTuple,
      EvidenceEvent.OutputTuple,
      EvidenceEvent.OutputObject
    >;

    "Ruling(address,uint256,uint256)": TypedContractEvent<
      RulingEvent.InputTuple,
      RulingEvent.OutputTuple,
      RulingEvent.OutputObject
    >;
    Ruling: TypedContractEvent<
      RulingEvent.InputTuple,
      RulingEvent.OutputTuple,
      RulingEvent.OutputObject
    >;
  };
}
