/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface KlerosInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "disputeStatus"
      | "currentRuling"
      | "appeal"
      | "appealPeriod"
      | "createDispute"
      | "appealCost"
      | "arbitrationCost"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeCreation"
      | "AppealPossible"
      | "AppealDecision"
      | "NewPeriod"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "disputeStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRuling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "appeal",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "appealPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDispute",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "appealCost",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationCost",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "disputeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRuling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "appealPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appealCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationCost",
    data: BytesLike
  ): Result;
}

export namespace DisputeCreationEvent {
  export type InputTuple = [_disputeID: BigNumberish, _arbitrable: AddressLike];
  export type OutputTuple = [_disputeID: bigint, _arbitrable: string];
  export interface OutputObject {
    _disputeID: bigint;
    _arbitrable: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppealPossibleEvent {
  export type InputTuple = [_disputeID: BigNumberish, _arbitrable: AddressLike];
  export type OutputTuple = [_disputeID: bigint, _arbitrable: string];
  export interface OutputObject {
    _disputeID: bigint;
    _arbitrable: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppealDecisionEvent {
  export type InputTuple = [_disputeID: BigNumberish, _arbitrable: AddressLike];
  export type OutputTuple = [_disputeID: bigint, _arbitrable: string];
  export interface OutputObject {
    _disputeID: bigint;
    _arbitrable: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPeriodEvent {
  export type InputTuple = [_disputeID: BigNumberish, _period: BigNumberish];
  export type OutputTuple = [_disputeID: bigint, _period: bigint];
  export interface OutputObject {
    _disputeID: bigint;
    _period: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Kleros extends BaseContract {
  connect(runner?: ContractRunner | null): Kleros;
  waitForDeployment(): Promise<this>;

  interface: KlerosInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  disputeStatus: TypedContractMethod<
    [_disputeID: BigNumberish],
    [bigint],
    "view"
  >;

  currentRuling: TypedContractMethod<
    [_disputeID: BigNumberish],
    [bigint],
    "view"
  >;

  appeal: TypedContractMethod<
    [_disputeID: BigNumberish, _extraData: BytesLike],
    [void],
    "payable"
  >;

  appealPeriod: TypedContractMethod<
    [_disputeID: BigNumberish],
    [[bigint, bigint] & { start: bigint; end: bigint }],
    "view"
  >;

  createDispute: TypedContractMethod<
    [_choices: BigNumberish, _extraData: BytesLike],
    [bigint],
    "payable"
  >;

  appealCost: TypedContractMethod<
    [_disputeID: BigNumberish, _extraData: BytesLike],
    [bigint],
    "view"
  >;

  arbitrationCost: TypedContractMethod<
    [_extraData: BytesLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "disputeStatus"
  ): TypedContractMethod<[_disputeID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentRuling"
  ): TypedContractMethod<[_disputeID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "appeal"
  ): TypedContractMethod<
    [_disputeID: BigNumberish, _extraData: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "appealPeriod"
  ): TypedContractMethod<
    [_disputeID: BigNumberish],
    [[bigint, bigint] & { start: bigint; end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDispute"
  ): TypedContractMethod<
    [_choices: BigNumberish, _extraData: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "appealCost"
  ): TypedContractMethod<
    [_disputeID: BigNumberish, _extraData: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "arbitrationCost"
  ): TypedContractMethod<[_extraData: BytesLike], [bigint], "view">;

  getEvent(
    key: "DisputeCreation"
  ): TypedContractEvent<
    DisputeCreationEvent.InputTuple,
    DisputeCreationEvent.OutputTuple,
    DisputeCreationEvent.OutputObject
  >;
  getEvent(
    key: "AppealPossible"
  ): TypedContractEvent<
    AppealPossibleEvent.InputTuple,
    AppealPossibleEvent.OutputTuple,
    AppealPossibleEvent.OutputObject
  >;
  getEvent(
    key: "AppealDecision"
  ): TypedContractEvent<
    AppealDecisionEvent.InputTuple,
    AppealDecisionEvent.OutputTuple,
    AppealDecisionEvent.OutputObject
  >;
  getEvent(
    key: "NewPeriod"
  ): TypedContractEvent<
    NewPeriodEvent.InputTuple,
    NewPeriodEvent.OutputTuple,
    NewPeriodEvent.OutputObject
  >;

  filters: {
    "DisputeCreation(uint256,address)": TypedContractEvent<
      DisputeCreationEvent.InputTuple,
      DisputeCreationEvent.OutputTuple,
      DisputeCreationEvent.OutputObject
    >;
    DisputeCreation: TypedContractEvent<
      DisputeCreationEvent.InputTuple,
      DisputeCreationEvent.OutputTuple,
      DisputeCreationEvent.OutputObject
    >;

    "AppealPossible(uint256,address)": TypedContractEvent<
      AppealPossibleEvent.InputTuple,
      AppealPossibleEvent.OutputTuple,
      AppealPossibleEvent.OutputObject
    >;
    AppealPossible: TypedContractEvent<
      AppealPossibleEvent.InputTuple,
      AppealPossibleEvent.OutputTuple,
      AppealPossibleEvent.OutputObject
    >;

    "AppealDecision(uint256,address)": TypedContractEvent<
      AppealDecisionEvent.InputTuple,
      AppealDecisionEvent.OutputTuple,
      AppealDecisionEvent.OutputObject
    >;
    AppealDecision: TypedContractEvent<
      AppealDecisionEvent.InputTuple,
      AppealDecisionEvent.OutputTuple,
      AppealDecisionEvent.OutputObject
    >;

    "NewPeriod(uint256,uint8)": TypedContractEvent<
      NewPeriodEvent.InputTuple,
      NewPeriodEvent.OutputTuple,
      NewPeriodEvent.OutputObject
    >;
    NewPeriod: TypedContractEvent<
      NewPeriodEvent.InputTuple,
      NewPeriodEvent.OutputTuple,
      NewPeriodEvent.OutputObject
    >;
  };
}
